import { ISourceCode } from '@src/model/sourceCode';

/**
 * Reprresent single stack frame in stack trace
 */
interface IBacktraceStackFrame {
  funcName: string;
  sourceCode?: string;
  library: string;
  line: number;
  column: number;
}

/**
 * Analyse stack trace generated by exception
 * Create Stack Frames and find calling library/program informaiton
 */
export class BacktraceStackTrace {
  public readonly fault: boolean = true;
  public readonly name = 'main';
  public stack: IBacktraceStackFrame[] = [];

  public sourceCodeInformation: { [index: string]: ISourceCode } = {};
  private readonly stackLineRe = /\s+at (.+) \((.+):(\d+):(\d+)\)/;

  private error: Error;
  constructor(err: Error | string) {
    // handle reports with message
    if (!(err instanceof Error)) {
      err = new Error();
    }
    this.error = err;
  }

  /**
   * Get Json data from Stack trace object
   */
  public toJson() {
    return {
      name: this.name,
      fault: this.fault,
      stack: this.stack,
    };
  }

  /**
   * Get source code information
   */
  public getSourceCode(): { [index: string]: ISourceCode } {
    return this.sourceCodeInformation;
  }

  /**
   * Start parsing stack frames
   */
  public parseStackFrames(): void {
    const stackTrace = this.error.stack;
    if (!stackTrace) {
      return;
    }
    // get exception lines and remove first line of descrtiption
    const lines = stackTrace.split('\n').slice(1);
    lines.forEach((line) => {
      const match = line.match(this.stackLineRe);
      if (!match || match.length < 4) {
        return;
      }
      const backtraceLibStackFrame = match[2].indexOf('node_modules/backtrace-js') !== -1;
      if (backtraceLibStackFrame) {
        return;
      }

      const stackFrame: IBacktraceStackFrame = {
        funcName: match[1],
        library: match[2],
        line: parseInt(match[3], 10),
        column: parseInt(match[4], 10),
      };

      if (this.stack.length === 0) {
        stackFrame['sourceCode'] = 'main';
      }
      this.stack.push(stackFrame);
    });
  }
}
